openapi: 3.0.0
info:
  title: Order API
  description: API for managing orders
  version: 1.0.0
servers:
  - url: http://localhost:3005
paths:
  /order:
    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /order/{orderId}:
    get:
      summary: Get an order by ID
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    put:
      summary: Update an order by ID
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    delete:
      summary: Delete an order by ID
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order deleted successfully
        '404':
          description: Order not found
  /order/status/{status}:
    get:
      summary: Get all orders by status
      parameters:
        - in: path
          name: status
          required: true
          schema:
            type: string
            enum: [ordering, accepted_order, accepted_delivery, delivering, delivered, refused_order, refused_delivery]
      responses:
        '200':
          description: Orders found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: No orders found
  /order/delivered/user/{userId}:
    get:
      summary: Get delivered orders by user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Orders found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: No orders found
  /order/status/{status}/restaurant/{restaurantId}:
    get:
      summary: Get orders by status and restaurant
      parameters:
        - in: path
          name: status
          required: true
          schema:
            type: string
            enum: [ordering, accepted_order, accepted_delivery, delivering, delivered, refused_order, refused_delivery]
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Orders found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: No orders found
  /ordersAll:
    get:
      summary: Get all orders
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: No orders found
  /orderExclude:
    get:
      summary: Get all orders excluding certain statuses
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: No orders found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        restaurantId:
          type: string
        status:
          type: string
          enum: [ordering, accepted_order, accepted_delivery, delivering, delivered, refused_order, refused_delivery]
        food:
          type: array
          items:
            type: object
            properties:
              foodId:
                type: string
              quantity:
                type: integer
    OrderInput:
      type: object
      properties:
        userId:
          type: string
        restaurantId:
          type: string
        food:
          type: array
          items:
            type: object
            properties:
              foodId:
                type: string
              quantity:
                type: integer
